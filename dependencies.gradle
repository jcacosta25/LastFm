allprojects {
    repositories {
        jcenter()
        google()
    }
}

ext {

    kotlin_version = '1.2.31'
    support_version = '27.1.1'
    junit_version = '4.12'
    constraint_version = '1.0.2'
    room_version = '1.0.0'
    arch_version = '1.1.1'
    retrofit_version = '2.2.0'
    okhttp_version = '3.7.0'
    dagger_version = '2.12'
    databinding_version = '3.1.1'
    expressocore_version = '2.2.2'
    playservices_version =  '11.0.4'
    multidex_version = '1.0.1'
    picasso_version = '2.71828'
    mockito_version = '2.17.0'


    mockito_package = 'org.mockito'
    dagger_package = 'com.google.dagger'
    retrofit_package = 'com.squareup.retrofit2'
    okhttp_package = 'com.squareup.okhttp3'
    picasso_package = 'com.squareup.picasso'
    room_package = 'android.arch.persistence.room'
    arch_package = 'android.arch.lifecycle'
    support_package = 'com.android.support'
    constraint_package = 'com.android.support.constraint'
    kotlin_package = 'org.jetbrains.kotlin'


    dependencies = [
            ConstraintLayout     : buildDependency(constraint_package,'constraint-layout',constraint_version),
            MultiDex             : buildDependency(support_package,'multidex',multidex_version),
            CardView               : buildDependency(support_package,'cardview-v7',support_version),
            CustomTabs             : buildDependency(support_package,'customtabs',support_version),
            SupportV4            : buildDependency(support_package,'support-v4',support_version),
            AppCompatV7          : buildDependency(support_package,'appcompat-v7',support_version),
            SupportDesign        : buildDependency(support_package,'design',support_version),
            Retrofit             : buildDependency(retrofit_package,'retrofit',retrofit_version),
            RetrofitGson           : buildDependency(retrofit_package,'converter-gson',retrofit_version),
            OkHttp               : buildDependency(okhttp_package,'okhttp',okhttp_version),
            OkHttpInterceptor    : buildDependency(okhttp_package,'logging-interceptor',okhttp_version),
            Picasso              : buildDependency(picasso_package,'picasso',picasso_version),
            RoomCompiler         : buildDependency(room_package,'compiler',room_version),
            ArchRoomRunTime      : buildDependency(room_package,'runtime',room_version),
            KotlinLib            : buildDependency(kotlin_package,'kotlin-stdlib-jre7',kotlin_version),
            Dagger               : buildDependency(dagger_package,'dagger',dagger_version),
            DaggerCompiler       : buildDependency(dagger_package,"dagger-compiler",dagger_version),
            DaggerAndroid        : buildDependency(dagger_package,"dagger-android",dagger_version),
            DaggerAndroidSupport : buildDependency(dagger_package,"dagger-android-support",dagger_version),
            DaggerAndroidProcessor : buildDependency(dagger_package,"dagger-android-processor",dagger_version),
            ArchExtensions         : buildDependency("android.arch.lifecycle","extensions",arch_version),
            AndroidDataBinding     : buildDependency('com.android.databinding','compiler',databinding_version),
            Gson                   : buildDependency('com.google.code.gson','gson','2.8.1')

    ]

    testDependencies = [
            JUnit                   : buildDependency('junit','junit',junit_version),
            Mockito                 : buildDependency(mockito_package,"mockito-core",mockito_version),
            KotlinReflect           : "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}",
            EspressoCore            : "com.android.support.test.espresso:espresso-core:${expressocore_version}"
    ]

}

String buildDependency ( String pack, String dependency, String version ) {
    return "${pack}:${dependency}:${version}"
}